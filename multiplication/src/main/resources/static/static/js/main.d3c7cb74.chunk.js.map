{"version":3,"sources":["logo.svg","services/ApiClient.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","console","log","updateMessage","catch","e","event","name","target","this","value","preventDefault","sendGuess","correct","resultAttempt","m","onSubmit","type","maxLength","onChange","min","React","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAAe,I,+CCATA,E,8FAMF,WACI,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,uBAGlD,SAAiBC,EAAKC,EAAEC,EAAEC,GACtB,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAC1C,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UACP,CACIC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KAtBzBP,EAEKE,WAAa,wBAFlBF,EAGKG,cAAgB,qBAHrBH,EAIKQ,YAAc,YAyBVR,Q,OC0EAiB,E,kDAlGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTd,EAAG,GAAIC,EAAG,GACVF,KAAM,GACNgB,QAAS,GACTb,MAAO,GAEX,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,qDAYnB,WAAoB,IAAD,OACftB,EAAUwB,YAAYC,MAClB,SAAAC,GACQA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACZ,EAAKC,SAAS,CACVxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,cAIhBc,QAAQC,IAAI,0BACZ,EAAKC,cAAc,8BAG7BC,OAAM,SAAAC,GAAC,OAAIJ,QAAQC,IAAIG,Q,0BAG7B,SAAaC,GACT,IAAMC,EAAOD,EAAME,OAAOD,KAC1BE,KAAKT,SAAL,eACKO,EAAOD,EAAME,OAAOE,U,gCAI7B,SAAmBJ,GAAQ,IAAD,OACtBA,EAAMK,iBACNxC,EAAUyC,UAAUH,KAAKnB,MAAMf,KAC3BkC,KAAKnB,MAAMd,EAAGiC,KAAKnB,MAAMb,EACzBgC,KAAKnB,MAAMZ,OACVkB,MAAK,SAAAC,GACEA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACRA,EAAKc,QACL,EAAKV,cAAc,0CAEnB,EAAKA,cAAc,oBAAsBJ,EAAKe,cAC9C,mCAIT,EAAKX,cAAc,2CAEvBC,OAAM,SAAAC,GAAC,OAAIJ,QAAQC,IAAIG,Q,2BAGlC,SAAcU,GACVN,KAAKT,SAAS,CACZT,QAASwB,M,oBAIf,WACI,OACI,gCACI,gCACI,uDACA,+BACKN,KAAKnB,MAAMd,EADhB,MACsBiC,KAAKnB,MAAMb,QAGrC,uBAAMuC,SAAUP,KAAKjB,mBAArB,UACI,gDAEI,uBAAOyB,KAAK,OAAOC,UAAU,KACtBX,KAAK,OACLG,MAAOD,KAAKnB,MAAMf,KAClB4C,SAAUV,KAAKf,kBAE1B,uBACA,gDAEI,uBAAOuB,KAAK,SAASG,IAAI,IAClBb,KAAK,QACLG,MAAOD,KAAKnB,MAAMZ,MAClByC,SAAUV,KAAKf,kBAE1B,uBACA,uBAAOuB,KAAK,SAASP,MAAM,cAE/B,6BAAKD,KAAKnB,MAAMC,iB,GA9FC8B,aCWlBC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACA,cAAC,EAAD,SCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3c7cb74.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","class ApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n\n    static challenge(){\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user,a,b,guess){\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n                )\n            });\n    }\n}\n\nexport default ApiClient;","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\n\nclass ChallengeComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            a: '', b: '',\n            user: '',\n            message: '',\n            guess: 1\n        };\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(){\n        ApiClient.challenge().then(\n            res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        this.setState({\n                            a: json.factorA,\n                            b: json.factorB\n                        });\n                    });\n                } else {\n                    console.log(\"Can't reach the server\");\n                    this.updateMessage(\"Can't reach the server\");\n                }\n            }\n        ).catch(e => console.log(e));\n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ApiClient.sendGuess(this.state.user,\n            this.state.a, this.state.b,\n            this.state.guess)\n            .then(res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        if (json.correct) {\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\n                        } else {\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\n                            \" is wrong, but keep playing!\");\n                        }\n                    });\n                } else {\n                   this.updateMessage(\"Error: server error or not available\");\n                }\n            }).catch(e => console.log(e));\n    }\n\n    updateMessage(m) {\n        this.setState({\n          message: m\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h3>Your new challenge is</h3>\n                    <h1>\n                        {this.state.a} x {this.state.b}\n                    </h1>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>\n                        Your alias:\n                        <input type=\"text\" maxLength=\"12\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Your guess:\n                        <input type=\"number\" min=\"0\"\n                               name=\"guess\"\n                               value={this.state.guess}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n            </div>\n        );\n    }\n}\n\nexport default ChallengeComponent;","import logo from './logo.svg';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <ChallengeComponent/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}